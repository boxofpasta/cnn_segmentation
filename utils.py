import tensorflow as tf
from scipy import misc
from matplotlib import pyplot as plt
import os
import numpy as np
import cv2
import functools
import shutil
from skimage.io import imread, imsave
import colorsys



def generate_labels(f_names, out_path):
    """ f_names should be a list of input image names:
        for each png mask in PASCAL_VOC 2007 dataset, generate
        a grayscale png where each pixel has label val from [0, 23) / 255.0 """
    fill_val = 255
    arr = np.full(3000, fill_val, dtype=np.uint16)
    max_ind = np.int16(0)

    for k in range(len(f_names)):
        mask_test = 255.0 * plt.imread(f_names[k]) / 16.0
        transformed = np.zeros([len(mask_test), len(mask_test[0])], dtype=np.uint16)

        for i in range(len(mask_test)):
            for j in range(len(mask_test[0])):
                pixel = mask_test[i][j]
                id = np.int16(pixel[0] * 100 + pixel[1] * 10 + pixel[2])
                if arr[id] == fill_val:
                    arr[id] = max_ind
                    max_ind += 1
                transformed[i][j] = arr[id]

        if k % 2 == 0:
            print str(100.0 * k / len(f_names)) + "% labels generated"

        imsave(out_path + f_names[k][-15: -4] + ".png", transformed)


def visualize_label(label):
    """ visualizes a label generated by generated_labels.
        input must be a 2D numpy array.
    """
    label *= 255

    # associate each value with a color, let there be 24 of them
    colors = []
    width = np.shape(label)[0]
    height = np.shape(label)[1]
    rgbArray = np.zeros((width, height, 3), 'uint8')
    increment = 1.0 / 24.0

    for i in range(24):
        color =  255.0 * np.array(colorsys.hsv_to_rgb(i * increment, i * increment, 1.0 - i * increment))
        color = np.uint8(color)
        colors.append(color)

    # set the image
    for i in range(len(rgbArray)):
        for j in range(len(rgbArray[0])):
            rgbArray[i][j] = colors[int(label[i][j])]

    plt.imshow(rgbArray)
    plt.show()


